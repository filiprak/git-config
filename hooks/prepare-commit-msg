#!/bin/bash

COMMIT_FILE=$1
COMMIT_SOURCE=$2
COMMIT_MSG="$(cat $COMMIT_FILE)"

# This way you can customize which branches should be skipped when
# prepending commit message.
if [ -z "$BRANCHES_TO_SKIP" ]; then
  BRANCHES_TO_SKIP=(master develop test)
fi

BRANCH_NAME=$(git symbolic-ref --short HEAD)
BRANCH_NAME="${BRANCH_NAME##*/}"

BRANCH_EXCLUDED=$(printf "%s\n" "${BRANCHES_TO_SKIP[@]}" | grep -c "^$BRANCH_NAME$")
BRANCH_IN_COMMIT=$(grep -c "\[$BRANCH_NAME\]" $COMMIT_FILE)
ISSUE_NUMBER=$(echo $BRANCH_NAME | grep -o -E '[0-9]{4,6}' | head -n 1)

if [ $COMMIT_SOURCE == "message" ] && ! [ -z "$ISSUE_NUMBER" ] && [ -n "$BRANCH_NAME" ] && ! [[ $BRANCH_EXCLUDED -eq 1 ]] && ! [[ $BRANCH_IN_COMMIT -ge 1 ]]; then 
  if [[ $COMMIT_MSG != *"(fixes #$ISSUE_NUMBER)"* ]]; then
    sed -i.bak -e "s/$/ (fixes #$ISSUE_NUMBER)/" $COMMIT_FILE
  fi
fi
